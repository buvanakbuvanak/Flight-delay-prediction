# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pNMzQevDiypU5ck4HjPMp2eqvI9Qel4d

import pandas as pd
import numpy as np
import pickle
import matplotlib.pyplot as plt
%matplotlib inline 
import scaborn as sns
import sklearn
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import RandomizedSearchCV
import imblearn
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score,classification_report,confusion_matrix,f1_score
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import pickle
import matplotlib.pyplot as plt
# %matplotlib inline 
import seaborn as sns
import sklearn
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import RandomizedSearchCV
import imblearn
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score,classification_report,confusion_matrix,f1_score









dataset=pd.read_csv("flightdata.csv")







"""dataset.info()

# New Section
"""

dataset.info()

data=pd.read_csv("flightdata.csv")
dataset.head()

dataset=dataset.drop('Unnamed: 25',axis=1)
dataset.isnull().sum()

#filter the dataset to clininate colums that aren't relevant to a predictive model.
dataset=dataset[["FL_NUM","MONTH","DAY_OF_MONTH","DAY_OF_WEEK","ORIGIN","DEST","CRS_ARR_TIME"]]
dataset.isnull().sum()



sns.scatterplot(x='ARR_DELAY',Y='ARR_DEL15',data=flight_data)



import math
for index,row in dataset.iterrows():
  dataset.loc[index,'CRS_ARR_TIME']=math.floor(row['CRS-ARR_TIME']/100)
  dataset.head()



from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
dataset['DEST']=le.fit_transform(dataset['DEST'])
dataset['ORIGIN']=le.fit_transform(dataset['ORIGIN'])
odataset.head(5)

dataset['ORIGIN'].unique()
array([0,1,4,3,2])
dataset=pd.get_dummies(dataset,columns=['ORIGIN','DEST'])
dataset.head()
X=dataset.iloc[:,0:8].values
Y=dataset.iloc[:,8:9].values
x



from sklearn.preprocessing import OneHotEncoder
oh= OneHotEncoder()
z= oh.fit_transform(x[:,4:5]).toarray()
t= oh.fit_transform(x[:,5:6]).toarray()
z
t

flight_data.describe()

sns.distplot(flight_data.MONTH)

## Decision tree
y_pred = classifier.predict([[129,99,1,0,0,1,0.1,1,1,0,1,1,1,1,1]])
print(y_pred)
(y_pred)

## RandomForest
y_

from seaborn.axisgrid import FacetGrid
sns.catplot(x"ARR_del15",y="ARR_DELAY",kind='bar',data=flight_data)
<seaborn.axisgrid.FacetGrid at 0x22716099eb0>

sns.heatmap(dataset.corr())

# Testing the model
y_pred = classification.predict(x_test)



from sklearn.preprocessing import standardScaler
sc= standardScaler()
x_train= sc.fit_transform(x_train)
x_test = sc.transform(x_test)

from IPython.utils.text import columnize
from sklearn.metrics.pairwise import DataConversionWarning
from sklearn.ensemble import RandomForestClassifier
rfc = RandomForestClassifier(n_estimators=10,criterion='entropy')
rfc.fit(x_train,y_train)
<ipython-input-125-b87bb2ba9825>:1:DataConversionWarning:A column-vector y warning
ravel().
rfc.fit(x_train,y_train)
RandomForestClassifier(criterion='entropy',n_estimates=10)
y_predict = rfc.predict(x_test)

#creating NN skleton view
classification = sequential()
classification.add(Dense(30,activation='relu'))
classification.add(Dense(128,activation='relu'))
classification.add(Dense(64,activation='relu'))
classification.add(Dense(22,activation='relu'))
classification.add(Dense(1,activation='sigmoid'))

# complling the ANN model
classification.compile(optimizer='adam',loss='binary_crossentropy', metrics=['accuracy'])

#Trainig the model
classification.fit(x_train,y_train,batch_size=4,validation_split=0.2,epochs=100)

## RandomForest
y_pred = rfc.predict([[129,99,1,0,0,1,1,1,0,1,1,1,1,1]])
print(y_pred)
(y_pred)

def predict_exit(sample_value):
 # covert list to numpy array
 sample_value = np.array(sample_value)
#Reshape because sample_value contains only 1 record
sample_value = sample_value.reshape(1,-1)
#Feature Scaling
sample_value = sc.transform(sample_value)
return classifier.predict(sample_value)

test=classification.predict([[1,1,121.000000,36.0,0,0,1,0,1,1,1,1,1,1,1,1]])
if test==1:
 print('Prediction: chance of delay')
else:
  print('Prediction: no chane of delay.')

from sklearn import model_selection
from sklearn.neural_network import MLPClassifier

from sklearn.ensemble import RandomForestClassifier
rfc = RandomForestClassifier(n_estimators=10,criterion='entropy')

#importing the necessary dependencies
from flask import Flask,request,render_template
import numpy as np
import pandas as pd 
import pickle 
import os

dfs=[]
models=[
   ('RF',RandomForestClassifier()),
   ('DecisionTree' ,DecisionTreeClassifier()),
   ('ANN',MLPClassifier())
]
results = []
 names = []
 scoring = ['accuracy','precision_weighted', 'recall_weghted', 'f1_weighted', 'roc_auc']
 target_names = ['no delay', 'delay']
 for name,model in models:
      kflod= model_selection.kfold(n_splits=5, shuffle=True, radom_state=90210)
      cv_results=model_selection.cross_validate(model, x_train, y_train,cv=kfold, scoring=scoring
      clf=model.fit(x_train,y_train)
      y_pred = clf.predict(x_test)
      print(name)
      print(classification_report(y_test, y_pred, target_names=target_names))
      results.appnd(cv_results)
      names.append(name)
      this_df=pd.DataFrame(cv_results)
      this_df['model']=name
      dfs.append(this_df)
final=pd.oncat(dfs, ignore_indext=true)
return final

sns.catplot(x="ARR_DEL15",y="ARR_DELAY",kind='bar',data=flight_data)

model = pickle.load(open('flight.pkl' , 'rb'))
app = Flask(_name_) #initializing the app

# giving some parameters that can be use in randized search cv
parameters={
            'n_estimators' : [1,2,30,55,68,74,90,120,115],
            'criterion' : ['gini' , 'entropy'],
            'max_features' : ["auto" , "sqrt", "log2"],
      'max_depth' : [2,5,8,10] 'verbose' :[1,2,3,4,6,,8,9,10]
}

#performing the randomized cv
RCV = RandomizedSearchCV(estimator=rf,param_distributions=parameters,cv=10,n_iter=4)

def predict():
  name = request.form['name']
  month = request.form['month']
  dayofmonth=request.form['dayofmonth']
  dayofweek =request.form['dayofweek']
  origin = request.form['origin']
if(origin == "msp"):
  origin1,origin2,origin3,origin4,origin5 = 0,0,0,0,1
if(origin == "dtw"):
  origin1,origin2,origin3,origin4,origin5 = 1,0,0,0,0
if(origin == "jfk"):
  origin1,origin2,origin3,origin4,origin5 = 0,0,1,0,0
if(origin == "sea"):
  origin1,origin2,origin3,origin4,origin5 = 0,1,0,0,0
if(origin == "alt"):
  origin1,origin2,origin3,origin4,origin5 = 0,0,0,1,0

destination = request.form['destination']
if(destination == 'msp'):
  destination1,destination2,destination3,destination4,destination5 = 0,0,0,0,1
if(destination == "dtw"):
  destination1,destination2,destination3,destination4,destination5  = 1,0,0,0,0
if(origin == "jfk"):
 destination1,destination2,destination3,destination4,destination5  = 0,0,1,0,0
if(origin == "sea"):
  destination1,destination2,destination3,destination4,destination5  = 0,1,0,0,0
if(origin == "alt"):
 destination1,destination2,destination3,destination4,destination5  = 0,0,0,1,0
 dept = request.form['dept']
 arrtime = request.form['arrtime']
 actdept = request.form['actdept']
 deptl5=int(dept)-int(actdept)
 total =[[name,month,daofmonth,dayofweek,origin,origin2,origin3,origin4,origin5,destination1,destination2,destination3,destination4,destination5]]
 #print(total)
 y_pred = model.predict(total)
print(y_pred)
if(y_pred==[0.]):
  ans="The Flight will be on time"
else:
   ans="The Filght will be delayed"
return render_template("index.html",showcase = ans)

if _name_=='_main_':
  app.run(debug = True)